# Redis入门篇（语法与命令）（二） #

## 一、简述 ##
    Redis支持的键值类型有：String字符类型、map散列类型、list列表类型、set集合类型、sortedset有序集合类型。
    本篇将对这些键值类型在使用上进行总结，并介绍下Keys命令，虽然语法简单，但由于数量过多，还需要我们多多实践。

## 二、String字符类型 ##
    1、赋值
    语法：SET key value
    
    127.0.0.1:6379> set test 123
    OK
    2、取值
    语法：GET key
    
    127.0.0.1:6379> get test
    "123“
    3、取值并赋值
    语法：GETSET key value
    
    127.0.0.1:6379> getset s2 222
    "111"
    127.0.0.1:6379> get s2
    "222"
    4、设置/获取多个键值
    语法：
    
    MSET key value [key value …]
    MGET key [key …]
    
    127.0.0.1:6379> mset k1 v1 k2 v2 k3 v3 
    OK 
    127.0.0.1:6379> get k1 
    “v1” 
    127.0.0.1:6379> mget k1 k3 
    1) “v1” 
    2) “v3”
    
    5、删除
    语法：DEL key
    
    127.0.0.1:6379> del test
    (integer) 1
    6、数值增减
    a. 递增数字
    当存储的字符串是整数时，redis提供一个实用的命令INCR，其作用是让当前键值递增，并返回递增后的值。
    
    语法：INCR key
    
    127.0.0.1:6379> incr num
    (integer) 1
    127.0.0.1:6379> incr num
    (integer) 2
    127.0.0.1:6379> incr num
    (integer) 3
    b. 增加指定整数
    语法：INCRBY key increment
    
    127.0.0.1:6379> incrby num 2
    (integer) 5
    127.0.0.1:6379> incrby num 2
    (integer) 7
    127.0.0.1:6379> incrby num 2
    (integer) 9
    c. 递减数值
    语法：DECR key
    
    127.0.0.1:6379> decr num
    (integer) 9
    127.0.0.1:6379> decr num
    (integer) 8
    d. 减少指定整数
    语法：DECRBY key decrement
    
    127.0.0.1:6379> decr num
    (integer) 6
    127.0.0.1:6379> decr num
    (integer) 5
    127.0.0.1:6379> decrby num 3
    (integer) 2
    127.0.0.1:6379> decrby num 3
    (integer) -1
    7、向尾部追加值
    append的作用是向键值的末尾追加value。如果键不存在则将该键的值设置为value，即相当于set key value。返回值是追加后字符串的总长度。
    
    语法：APPEND key value
    
    127.0.0.1:6379> set str hello
    OK
    127.0.0.1:6379> append str " world!"
    (integer) 12
    127.0.0.1:6379> get str
    "hello world!"
    8、获取字符串长度
    STRLEN命令返回键值的长度，如果键不存在则返回0.
    
    语法：STRLEN key
    
    127.0.0.1:6379> strlen str
    (integer) 0
    127.0.0.1:6379> set str hello
    OK
    127.0.0.1:6379> strlen str
    (integer) 5
## 三、map散列类型 ##
    在redis中，map也叫hash。假设有User对象以JSON序列化的形式存储到Redis中，User对象有id，username、password、age、name等属性，存储的过程如下：
    
    保存、更新： User对象 –> json(string) –> redis 。
    
    如果在业务上只是更新age属性，其他的属性并不做更新我应该怎么做呢？ 如果仍然采用上边的方法在传输、处理时会造成资源浪费，下边讲的hash可以很好的解决这个问题。
    
    redis hash介绍
    hash叫散列类型，它提供了字段和字段值的映射。字段值只能是字符串类型， 
    不支持散列类型、集合类型等其他类型。如下：
    
    
    
    1、赋值
    HSET命令不区分插入和一时更新操作，当执行插入操作时HSET命令返回1，当执行更新操作时返回0。
    
    一次设置一个字段值
    语法：HSET key field value
    
    127.0.0.1:6379> hset user username zhangesan
    (integer) 1
    一次设置多个字段值
    语法：HMSET key field value [field value…]
    
    127.0.0.1:6379> hmset user age 20 username lisi
    OK
    当字段不存在时赋值，类似HSET，区别在于如果字段存在，该命令不执行任何操作
    语法：HSETNX key field value
    
    127.0.0.1:6379> hsetnx user age 30 
    (integer) 0
    如果user中没有age字段，则设置age值为30，否则不做任何操作。
    
    2、取值
    一次获取一个字段值
    语法：HGET key field
    
    127.0.0.1:6379> hget user username
    "zhangesan"
    一次获取多个字段值
    语法：HMGET key filed[field…]
    
    127.0.0.1:6379> hmget user age username
    1) "20"
    2) "lisi"
    获取所有字段值
    语法：HGETALL key
    
    127.0.0.1:6379> hgetall user
    1) "age"
    2) "20"
    3) "username"
    4) "lisi"
    3、删除字段
    可以删除一个或多个字段，返回值是被删除的字段个数。
    
    语法：HDEL key field [field…]
    
    127.0.0.1:6379> hdel user age
    (integer) 1
    127.0.0.1:6379> hdel user age name
    (integer) 0
    127.0.0.1:6379> hdel user age username
    (integer) 1
    4、增加数字
    语法：HINCRBY key field increment
    
    127.0.0.1:6379> hincrby user age 2  将用户的年龄加2
    (integer) 22
    127.0.0.1:6379> hget user age   获取用户的年龄
    "22“
    5、判断字段是否存在
    语法：HEXISTS key field
    
    127.0.0.1:6379> hexists user age查看user中是否有age字段
    (integer) 1
    127.0.0.1:6379> hexists user name   查看user中是否有name字段
    (integer) 0
    6、只获取字段名或字段值
    语法：
    
    HKEYS key
    HVALS key
     
    127.0.0.1:6379> hmset user age 20 name lisi
    OK
    127.0.0.1:6379> hkeys user
    1) "age"
    2) "name"
    127.0.0.1:6379> hvals user
    1) "20"
    2) "lisi"
    7、获取字段数量
    语法：HLEN key
    
    127.0.0.1:6379> hlen user
    (integer) 2
## 四、list列表类型 ##
    Arraylist和linkedlist的区别
    ArrayList是使用数组来存储数据，特点：查询快、增删慢
    LinkedList是使用双向链表存储数据，特点：增删快、查询慢，但是查询链表两端的数据也很快。
    redis的list采用链表来存储，故对于redis的list数据类型的操作，是操作list的两端数据来操作的。

    1、向列表两端增加元素
    向列表左边增加元素
    语法：LPUSH key value [value…]
    
    127.0.0.1:6379> lpush list1 1 2 3
    (integer) 3
    向列表右边增加元素
    127.0.0.1:6379> rpush list1 4 5 6
    (integer) 3
    2、查看列表
    LRANGE命令是列表类型最常用的命令之一，获取列表中的某一片段，将返回start、stop之间的所有元素（包含两端的元素），索引从0开始。索引可以是负数，如：“-1”代表最右边的一个元素。
    
    语法：LRANGE key start stop
    
    127.0.0.1:6379> lrange list1 0 2
    1) "1"
    2) "2"
    3) "3"
    127.0.0.1:6379> lrange list1 0 -1
    1) "1"
    2) "2"
    3) "3"
    4) "4"
    5) "5"
    6) "6"
    3、从列表两端弹出元素
    LPOP命令从列表左边弹出一个元素，会分两步完成： 
    第一步：装列表左边的元素从列表中移除 
    第二步：返回被移除的元素值。
    
    语法：
    
    LPOP key
    RPOP key
     
    127.0.0.1:6379> lpop list1
    "1"
    127.0.0.1:6379> rpop list1
    "6"
    4、获取列表中元素的个数
    语法：LLEN key
    
    127.0.0.1:6379> llen list1
    (integer)4
    5、删除列表中指定的值
    LREM命令会删除列表中前count个值为value的元素，返回实际删除的元素个数。根据count值的不同，该命令的执行方式会有所不同。
    
    当count>0时，LREM会从列表左边开始删除。
    当count<0时，LREM会从列表右边开始删除。
    当count=0时，LREM删除所有值为value的元素。
    语法：LREM key count value
    
    127.0.0.1:6379> lrem list1 1 4  从左边开始删除值为4的元素
    (integer)1
    6、获取/设置指定索引的元素值
    获得指定索引的元素值
    语法：LINDEX key index
    
    127.0.0.1:6379> lindex list1 2
    "5"
    设置指定索引的元素值
    语法：LSET key index value
    
    127.0.0.1:6379> lset list1 2 4
    OK
    127.0.0.1:6379> lrange list1 0 -1
    1) "2"
    2) "3"
    3) "4"
    7、只保留列表指定片段
    指定范围和LRANGE一致
    
    语法：LTRIM key start stop
    
    127.0.0.1:6379> lrange list1 0 -1
    1) "2"
    2) "3"
    3) "4"
    127.0.0.1:6379> ltrim list1 0 1
    OK
    127.0.0.1:6379> lrange list1 0 -1
    1) "4"
    8、向列表中插入元素
    该命令首先会在列表中从左到右查找值为pivot的元素，然后根据第二个参数是BEFORE还是AFTER来决定将value插入到该元素的前面还是后面。
    
    语法：LINSERT key BEFORE|AFTER pivot value
    
    127.0.0.1:6379> lrange list1 0 -1
    1) "4"
    127.0.0.1:6379> linsert list1 after 4 5
    (integer) 2
    127.0.0.1:6379> lrange list1 0 -1
    1) "4"
    2) "5"
    9、将元素从一个列表转移到另一个列表中
    语法：RPOPLPUSH source destination
    
    127.0.0.1:6379> rpoplpush list1 list2
    "5"
    127.0.0.1:6379> lrange list2 0 -1
    1)"5"
    127.0.0.1:6379> lrange list1 0 -1
    1) "4"
## 五、set集合类型 ##
    set（集合）与list（列表）的区别：
    
    集合类型：无序、不可重复
    列表类型：有序、可重复
    1、增加/删除元素
    语法：SADD key member [member…]
    
    127.0.0.1:6379> sadd set1 a b c
    (integer)3
    127.0.0.1:6379> sadd set1 a
    (integer)0
    语法：SREM key memeber [member…]
    
    127.0.0.1:6379> srem set1 c d   d不在集合中，故只移除c
    (integer)1
    2、获取集合中所有元素
    语法：SMEMBERS key
    
    127.0.0.1:6379> smemebers set1
    1)"b"
    1)"a"
    3、判断元素是否在集合中
    语法：SISMEMBER key member
    
    127.0.0.1:6379> sismember set1 a
    (integer)1
    127.0.0.1:6379> sismember set1 h
    (integer)0
    4、运算命令
    a. 集合的差集运算 A - B
    属于A并且不属于B的元素构成的集合。
    
    
    
    语法：SDIFF key [key…]
    
    127.0.0.1:6379> sadd setA 1 2 3
    (integer)3
    127.0.0.1:6379> sadd setB 2 3 4
    (integer)3
    127.0.0.1:6379> sdiff setA setB
    1)"1"
    127.0.0.1:6379> sdiff setB setA
    1)"4"
    b. 集合的交集运算 A ∩ B
    属于A且属于B的元素构成的集合。
    
    
    
    语法：SINTER key [key…]
    
    127.0.0.1:6379> sinter setA setB
    1)"2"
    2)"3"
    c. 集合的并集运算 A ∪ B
    属于A或者属于B的元素构成的集合。
    
    
    
    语法：SUNION key [key…]
    
    127.0.0.1:6379> sunion setA setB
    1) "1"
    2) "2"
    3) "3"
    4) "4"
    5、获取集合中元素的个数
    语法：SCARD key
    
    127.0.0.1:6379> smembers setA
    1) "1"
    2) "2"
    3) "3"
    127.0.0.1:6379> scard setA
    (integer)3
    6、从集合中弹出一个元素
    注意：由于集合是无序的，所以SPOP命令会从集合中随机选择一个元素弹出。
    
    语法：SPOP key
    
    127.0.0.1:6379> spop setA
    "1"
## 六、sortedset有序集合类型 ##
    Sortedset又叫zset，是有序集合，可排序，但是唯一。Sortedset与set不同之处是，会给set中的元素添加一个分数，然后通过这个分数进行排序。
    
    1、增加元素
    向有序集合中加入一个元素和该元素的分数，如果该元素已经存在则会用新的分数替换原有的分数。返回值是新加入到集合中的元素个数，不包含之前已经存在的元素。
    
    语法：ZADD key score member [score member…]
    
    127.0.0.1:6379> zadd scoreboard 80 zhangesan 89 lisi 94 wangwu
    (integer)3
    127.0.0.1:6379> zadd scoreboard 97 lisi
    (integer)0
    2、获取元素的分数
    语法：ZSCORE key member
    
    127.0.0.1:6379> zscore scoreboard lisi
    "97"
    3、删除元素
    移除有序集key中的一个或多个成员，不存在的成员将被忽略。 
    当key存在但不是有序集类型时，返回一个错误。
    
    语法：ZREM key member [member…]
    
    127.0.0.1:6379> zrem scoreboard lisi
    (integer)1
    4、获取排名在某个范围的元素列表
    a. 按照元素分数从小到大的顺序返回索引从start到stop之间的所有元素（包含两端的元素）
    语法：ZRANGE key start stop [WITHSCORES]
    
    127.0.0.1:6379> zrange scoreboard 0 2
    1)"zhangesan"
    2)"wangwu"
    3)"lisi"
    b. 按照元素分数从大到小的顺序返回索引从start到stop之间的所有元素（包含两端的元素）
    语法：ZREVRANGE key start stop [WITHSCORES]
    
    127.0.0.1:6379> zrevrange scoredboard 0 2
    1)"lisi"
    2)"wangwu"
    3)"zhangesan"
    如果需要获得元素的分数，可以在命令尾部加上WITHSCORES参数
    
    127.0.0.1:6379> zrange scoreboard 0 1 WITHSCORES
    1) "zhangsan"
    2) "80"
    3) "wangwu"
    4) "94"
    5、获取元素的排名
    a. 从小到大
    语法：ZRANK key member
    
    127.0.0.1:6379> zrank scoreboard lisi
    (integer)0
    b. 从大到小
    语法：ZREVRANK key member
    
    127.0.0.1:6379> zrevrank scoreboard zhangsan
    (integer)1
    6、获取指定分数范围的元素
    语法：ZRANGEBYSCORE key min max [WITHSCORES][LIMIT offset count]
    
    127.0.0.1:6379> zrangebyscore scoreboard 90 97 WITHSCORES
    1) "wangwu"
    2) "94"
    3) "lisi"
    4) "97"
    127.0.0.1:6379> zrangebyscore scoreboard 70 100 limit 1 2
    1) "wangwu"
    2) "lisi"
    7、增加某个元素的分数
    返回值是更改后的分数
    
    语法：ZINCRBY key increment member
    
    127.0.0.1:6379> zincrby scoreboard 4 lisi
    "101"
    8、获取集合中元素的数量
    语法：ZCARD key
    
    127.0.0.1:6379> zcard scoreboard
    (integer)3 
    9、获得指定分数范围内的元素个数
    语法：ZCOUNT key min max
    
    127.0.0.1:6379> zcount scoreboard 80 90
    (integer) 1
    10、按照排名范围删除元素
    语法：ZREMRANGEBYRANK key start stop
    
    127.0.0.1:6379> zremrangebyrank scoreboard 0 1
    (integer)2
    127.0.0.1:6379> zrange scoreboard 0 -1
    1)"lisi"
    11、按照分数范围删除元素
    语法：ZREMRANGEBYSCORE key min max
    
    127.0.0.1:6379> zadd scoreboard 84 zhangsan
    (integer)1
    127.0.0.1:6379> zremrangebyscore scoreboard 80 100
    (integer)1
## 七、Keys命令 ##
    1、keys
    返回满足给定pattern的所有key
    
    127.0.0.1:6379> keys mylist*
    1) "mylist"
    2) "mylist5"
    3) "mylist6"
    4) "mylist7"
    5) "mylist8"
    2、exists
    确认一个key是否存在 
    示例：从结果来看，数据库中不存在HongWan这个key，但是age这个key是存在的
    
    127.0.0.1:6379> exists HongWan
    (integer)0
    127.0.0.1:6379> exists age
    (integer)1
    3、del
    删除一个key
    
    127.0.0.1:6379> del age
    (integer)1
    127.0.0.1:6379> exists age
    (integer)0
    4、rename
    重命名key 
    示例：把age改成age_new。
    
    127.0.0.1:6379> keys *
    1) "age"
    127.0.0.1:6379> rename age age_new
    OK
    127.0.0.1:6379>keys *
    1) "age_new"
    5、type
    返回值的类型 
    示例：判断出值的类型
    
    127.0.0.1:6379> type addr
    string
    127.0.0.1:6379> type myzset2
    set
    127.0.0.1:6379> type mylist
    list
    6、设置key的生存时间
    redis在实际使用过程中更多的是用作缓存，然而缓存的数据一般都是需要设置生存时间的，即：到期后数据销毁。
    
    EXPIRE key seconds  设置key的生存时间（单位：秒）key在多少秒后会自动删除
    TTL key 设置key剩余的生存时间
    PERSIST key 清除生存时间
    PEXPIRE key milliseconds生存时间设置单位为：毫秒
    示例：
    
    127.0.0.1:6379> set test 1  设置test的值为1
    OK
    127.0.0.1:6379> get test获取test的值
    "1"
    127.0.0.1:6379> EXPIRE test 5   设置test的生存时间为5秒
    (integer)1
    127.0.0.1:6379> TTL test查看test的生于生成时间还有1秒删除
    (integer)1
    127.0.0.1:6379> TTL test
    (integer) -2
    127.0.0.1:6379> get test获取test的值，已经删除
    (nil)
